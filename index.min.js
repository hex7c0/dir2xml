"use strict";

function wrapper(my) {
    function checksum(obj, file) {
        var check = crypto(my.hash), ff = fs.readFileSync(file);
        return check.update(ff), obj ? (obj.hash = check.digest("hex"), obj) : "<hash>" + check.digest("hex") + "</hash>";
    }
    function cached(h, f) {
        var stat;
        if (my.cache && STORY.root === my.root) {
            if (stat = fs.statSync(my.root), stat && STORY.mtime === stat.mtime.getTime() && STORY.json === my.json && STORY.hash === my.hash) return STORY.body;
            STORY = Object.create(null);
        }
        var body;
        return body = dir_sync(my.root, h, ""), f && (body += f), my.cache && (stat = fs.statSync(my.root), 
        stat && (STORY.root = my.root, STORY.body = body, STORY.mtime = stat.mtime.getTime(), 
        STORY.json = my.json, STORY.hash = my.hash)), body;
    }
    function simple(h, f) {
        var body = dir_sync(my.root, h, "");
        return f ? body + f : body;
    }
    function json(head, after, name, abs, stats, dir, root) {
        var index, o;
        return index = dir ? CCdir++ : CCfile++, head[root] ? o = head[root][index] = Object.create(null) : (head[root] = Object.create(null), 
        o = head[root][index] = Object.create(null)), o.name = name, o.ctime = stats.ctime.getTime(), 
        o.mtime = stats.mtime.getTime(), dir ? o.type = "dir" : (o.atime = stats.atime.getTime(), 
        o.size = stats.size, o = hash(o, abs), o.type = "file"), [ head, null ];
    }
    function xml(head, after, name, abs, stats, dir) {
        var h = "", a = "";
        return h = dir ? '<dir id="' + CCdir++ + '">' : '<file id="' + CCfile++ + '">', 
        h += "<name>" + name + "</name>", h += "<ctime>" + stats.ctime.getTime() + "</ctime>", 
        h += "<mtime>" + stats.mtime.getTime() + "</mtime>", dir ? a = "</dir>" : (h += "<atime>" + stats.atime.getTime() + "</atime>", 
        h += "<size>" + stats.size + "</size>", h += hash(!1, abs), h += "</file>"), [ head + h, after + a ];
    }
    function dir_sync(prova, heads, afters) {
        var head = heads, after = afters, stat = fs.statSync(prova);
        if (stat) {
            var files = fs.readdirSync(prova);
            if (files) for (var i = 0, ii = files.length; i < ii; ++i) {
                var file = files[i];
                if (!(my.exclude && my.exclude.test(file) || my.dotfiles && "." === file[0])) {
                    var root = prova + path.sep + file, stats = fs.statSync(root);
                    if (stats) {
                        var r, hea, afte;
                        stats.isDirectory() ? (r = build(head, after, file, root, stats, !0, prova), hea = r[0], 
                        afte = r[1], head = dir_sync(root, hea, afte), after = "") : (r = build(head, after, file, root, stats, !1, prova), 
                        head = r[0], after = r[1]);
                    }
                }
            }
        }
        return after ? head + after : head;
    }
    var crypto = require("crypto").createHash, STORY = Object.create(null), header = '<?xml version="1.0" encoding="UTF-8"?><home>', footer = "</home>", CCdir = 0, CCfile = 0, end = simple;
    my.cache && (end = cached);
    var hash = checksum;
    my.hash || (hash = function(obj) {
        return obj || "";
    });
    var build = xml;
    return my.json ? (build = json, end(Object.create(null), null)) : end(header, footer);
}

function dir(root, opt) {
    var resolve = path.resolve;
    if (!root) throw new TypeError("root path required");
    var r = resolve(root);
    if ("/" == r[r.length - 1] && (r = r.substr(0, r.length - 1)), !fs.existsSync(root)) throw new Error("path not exists");
    if (!fs.statSync(r).isDirectory()) throw new Error("path is not a directory");
    var options = opt || Object.create(null), my = {
        root: r,
        exclude: options.exclude || !1,
        dotfiles: options.dotfiles !== !1,
        cache: options.cache !== !1,
        json: Boolean(options.json),
        hash: options.hash !== !1 && String(options.hash || "md5")
    };
    return wrapper(my);
}

var path = require("path"), fs = require("fs");

module.exports = dir;
